library(ncvreg)
library(glmnet)
library(ppcor)
library(philentropy)

compute_f_divergence <- function(p1, p2, divergence_type) {
  density_p1 <- density(p1)
  density_p2 <- density(p2)
  
  common_grid <- seq(
    max(min(density_p1$x), min(density_p2$x)),
    min(max(density_p1$x), max(density_p2$x)),
    length.out = 1000
  )
  
  density_p1_interp <- approx(density_p1$x, density_p1$y, xout = common_grid)$y
  density_p2_interp <- approx(density_p2$x, density_p2$y, xout = common_grid)$y
  
  #density_p1_interp <- density_p1_interp / sum(density_p1_interp, na.rm = TRUE)
  #density_p2_interp <- density_p2_interp / sum(density_p2_interp, na.rm = TRUE)
  
  density_p1_interp[is.na(density_p1_interp)] <- 0
  density_p2_interp[is.na(density_p2_interp)] <- 0
  
  epsilon <- 1e-10
  density_p1_interp <- (density_p1_interp + epsilon) / sum(density_p1_interp + epsilon, na.rm = TRUE)
  density_p2_interp <- (density_p2_interp + epsilon) / sum(density_p2_interp + epsilon, na.rm = TRUE)
  
  prob_matrix <- rbind(density_p1_interp, density_p2_interp)
  return(as.numeric(distance(prob_matrix, method = divergence_type)))
}
compute_divergence_matrix <- function(DATA, distance = 1, normalize_distance = TRUE, 
                                      standardize_distance = TRUE, n_iterations = 200, 
                                      sampling_fraction = 0.5) { 
  single_cell_data <- DATA$singleCELLdata
  time <- DATA$time
  numGENES <- DATA$numGENES
  num_time_points <- length(time)
  num_cells <- ncol(single_cell_data[[1]])  
  
  distance_matrices <- vector("list", n_iterations)
  
  for (iter in 1:n_iterations) {
    # if (iter %% 10 == 0) cat("Iteration:", iter, "\n")  
    
    sampled_cells <- sample(1:num_cells, size = round(num_cells * sampling_fraction), replace = TRUE)
    DISTANCE_matrix <- matrix(data = 0, nrow = num_time_points - 1, ncol = numGENES)
    
    for (ti in 1:(num_time_points - 1)) {
      data_ti <- t(single_cell_data[[ti]])[, sampled_cells]
      data_ti_plus1 <- t(single_cell_data[[ti + 1]])[,sampled_cells]
      
      for (gi in 1:numGENES) {
        p1 <- data_ti[gi, ]
        p2 <- data_ti_plus1[gi, ]
        
        if (distance == 1) {  
          test.stat <- ks.test(p1, p2)  
          DISTANCE_matrix[ti, gi] <- test.stat$statistic  
          
        } else if (distance == 2) {  
          DISTANCE_matrix[ti, gi] <- cmtest2(p1, p2)$CM_limiting_stat  
          
        } else if (distance == 3) {  
          test.stat <- ad.test(p1, p2)  
          DISTANCE_matrix[ti, gi] <- test.stat$ad[2, 1]  
          
        } else if (distance == 4) {  
          DISTANCE_matrix[ti, gi] <- abs(mean(p1) - mean(p2))  
          
        } else if (distance == 5) {  
          DISTANCE_matrix[ti, gi] <- compute_f_divergence(p1, p2, divergence_type = "kullback-leibler")  
          
        } else if (distance == 6) {  
          DISTANCE_matrix[ti, gi] <- compute_f_divergence(p2, p1, divergence_type = "kullback-leibler")  
          
        } else if (distance == 7) {  
          kl_pq <- compute_f_divergence(p1, p2, divergence_type = "kullback-leibler")  
          kl_qp <- compute_f_divergence(p2, p1, divergence_type = "kullback-leibler")  
          DISTANCE_matrix[ti, gi] <- 0.5 * (kl_pq + kl_qp)  
          
        } else if (distance == 8) {  
          DISTANCE_matrix[ti, gi] <- compute_f_divergence(p1, p2, divergence_type = "jensen-shannon")  
          
        } else if (distance == 9) {  
          DISTANCE_matrix[ti, gi] <- compute_f_divergence(p1, p2, divergence_type = "pearson")  
          
        } else if (distance == 10) {  
          DISTANCE_matrix[ti, gi] <- compute_f_divergence(p1, p2, divergence_type = "neyman")  
          
        } else if (distance == 11) {  
          pearson_pq <- compute_f_divergence(p1, p2, divergence_type = "pearson")  
          pearson_qp <- compute_f_divergence(p2, p1, divergence_type = "pearson")  
          DISTANCE_matrix[ti, gi] <- 0.5 * (pearson_pq + pearson_qp)  
          
        } else if (distance == 12) {  
          m <- (p1 + p2) / 2  
          js_pearson_pq <- compute_f_divergence(p1, m, divergence_type = "pearson")  
          js_pearson_qp <- compute_f_divergence(p2, m, divergence_type = "pearson")  
          DISTANCE_matrix[ti, gi] <- 0.5 * (js_pearson_pq + js_pearson_qp)  
          
        } else if (distance == 13) {  
          DISTANCE_matrix[ti, gi] <- compute_f_divergence(p1, p2, divergence_type = "prob_symm")  
          
        } else if (distance == 14) {  
          DISTANCE_matrix[ti, gi] <- compute_f_divergence(p1, p2, divergence_type = "clark")  
          
        } else {  
          stop("Invalid distance type selected! Choose a number from 1 to 14.")  
        }  
      }  
    }  
    
    if (normalize_distance) {
      deltaT <- replicate(dim(DISTANCE_matrix)[2], time[2:length(time)] - time[1:(length(time) - 1)])
      DISTANCE_matrix <- DISTANCE_matrix / deltaT
    }
    
    if (standardize_distance) {
      mean_val <- mean(DISTANCE_matrix, na.rm = TRUE)
      sd_val <- sd(DISTANCE_matrix, na.rm = TRUE)
      DISTANCE_matrix <- (DISTANCE_matrix - mean_val) / sd_val
    }
    
    distance_matrices[[iter]] <- DISTANCE_matrix
  }
  
  return(distance_matrices)
}

process_regression <- function(DATA, distance_matrices, noDIAG = 1, penalty_type = "lasso") {   
  num_genes <- DATA$numGENES  
  num_time_points <- length(DATA$time)  
  num_iterations <- length(distance_matrices) 
  
  alpha_results <- list()  
  lambda_results <- list()  
  
  for (time_index in 1:(num_time_points - 2)) { 
    cat("Processing time transition:", time_index, "â†’", time_index + 1, "\n")
    
    alpha_matrix <- matrix(0, nrow = num_genes, ncol = num_genes)  
    lambda_values <- numeric(num_genes)  
    
    for (target_gene in 1:num_genes) {  
      X_matrix <- matrix(0, nrow = num_iterations, ncol = num_genes)  
      Y_vector <- numeric(num_iterations)  
      
      for (iter in 1:num_iterations) {  
        distance_matrix <- distance_matrices[[iter]]  
        
        X_matrix[iter, ] <- distance_matrix[time_index, ]  
        Y_vector[iter] <- distance_matrix[time_index + 1, target_gene]  
        #print(dim(X_matrix))
      }  
      
      Y_vector <- matrix(Y_vector, ncol = 1)  
      #print(paste("Target gene:", target_gene))
      #print("Y_vector values:")
      #print(Y_vector)
      
      if (penalty_type == "lasso") {  
        nfold <- dim(X_matrix)[1]
        foldid <- 1:nfold

        #CV_results <- cv.glmnet(as.matrix(X_matrix), Y_vector, alpha = 1,  nfolds = 5, grouped = FALSE) 
        CV_results <- cv.glmnet(as.matrix(X_matrix),Y_vector,alpha=1, nfolds = nfold, foldid = foldid,
                                keep = TRUE, lower.limits=0, upper.limits=Inf, grouped = FALSE)
        best_lambda <- CV_results$lambda.min  
        best_coefficients <- as.numeric(coef(CV_results, s = "lambda.min"))[-1]  
        
      } else if (penalty_type %in% c("SCAD", "MCP")) {  
        CV_results <- cv.ncvreg(as.matrix(X_matrix), Y_vector, penalty = penalty_type, alpha = 1, lambda.min = 0.01, nlambda = 100)  
        best_lambda <- CV_results$lambda.min  
        best_coefficients <- coef(CV_results$fit, lambda = best_lambda)[-1]  
      } else {  
        stop("Invalid penalty type. Choose from 'lasso', 'SCAD', or 'MCP'.")  
      }  
      
      lambda_values[target_gene] <- best_lambda  
      
      partial_corr_timepoints <- c(time_index, time_index + 1, time_index + 2) 
      window_data <- do.call(rbind, DATA$singleCELLdata[partial_corr_timepoints])
      partial_corr <- pcor(window_data, method = "spearman")$estimate  
      if (dim(partial_corr)[1] == length(best_coefficients)) {  
        best_coefficients <- best_coefficients * sign(partial_corr[, target_gene])  
      }  
      
      if (length(best_coefficients) > num_genes) {  
        best_coefficients <- best_coefficients[1:num_genes]  
      } else if (length(best_coefficients) < num_genes) {  
        best_coefficients <- c(best_coefficients, rep(0, num_genes - length(best_coefficients)))  
      }  
      
      if (noDIAG == 1) {
        best_coefficients[target_gene] <- 0  
        alpha_matrix[, target_gene] <- best_coefficients  
      } else {
        alpha_matrix[, target_gene] <- best_coefficients  
      }
    }  
    
    alpha_results[[time_index]] <- alpha_matrix  
    lambda_results[[time_index]] <- lambda_values  
  }  
  
  return(list(alpha_results = alpha_results, lambda_results = lambda_results))  
}
